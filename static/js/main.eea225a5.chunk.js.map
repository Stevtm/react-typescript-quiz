{"version":3,"sources":["API.ts","utils.ts","components/QuestionCard/styles.ts","components/QuestionCard/index.tsx","images/mountains.jpeg","App.styles.ts","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Difficulty","fetchQuizQuestions","amount","difficulty","a","endpoint","fetch","json","data","results","map","question","answers","array","incorrect_answers","correct_answer","sort","Math","random","Wrapper","styled","div","ButtonWrapper","correct","userClicked","QuestionCard","callback","userAnswer","questionNr","totalQuestions","className","dangerouslySetInnerHTML","__html","answer","correctAnswer","disabled","value","onClick","GlobalStyle","createGlobalStyle","DBImage","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","EASY","newQuestions","length","undefined","e","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gJAaYA,E,wFAAAA,K,YAAAA,E,gBAAAA,E,aAAAA,M,KAML,I,QAAMC,EAAkB,uCAAG,WACjCC,EACAC,GAFiC,iBAAAC,EAAA,6DAI3BC,EAJ2B,6CAIsBH,EAJtB,uBAI2CC,EAJ3C,2BAKPG,MAAMD,GALC,8BAKUE,OALV,cAK3BC,EAL2B,yBAM1BA,EAAKC,QAAQC,KAAI,SAACC,GACxB,OAAO,2BACHA,GADJ,IAECC,SC5B0BC,ED4BJ,GAAD,mBACjBF,EAASG,mBADQ,CAEpBH,EAASI,iBC7BL,YAAIF,GAAOG,MAAK,kBAAMC,KAAKC,SAAW,SADlB,IAACL,MDmBK,2CAAH,wD,cEjBlBM,EAAUC,IAAOC,IAAV,iRAoBPC,EAAgBF,IAAOC,IAAV,ubAcV,gBAAGE,EAAH,EAAGA,QAASC,EAAZ,EAAYA,YAAZ,OACbD,EACG,4CACCA,GAAWC,EACZ,2CACA,8C,OCSSC,EAjCuB,SAAC,GAOhC,IANNd,EAMK,EANLA,SACAC,EAKK,EALLA,QACAc,EAIK,EAJLA,SACAC,EAGK,EAHLA,WACAC,EAEK,EAFLA,WACAC,EACK,EADLA,eAEA,OACC,eAACV,EAAD,WACC,oBAAGW,UAAU,SAAb,uBACYF,EADZ,MAC2BC,KAE3B,mBAAGE,wBAAyB,CAAEC,OAAQrB,KACtC,8BACEC,EAAQF,KAAI,SAACuB,GACb,OACC,cAACX,EAAD,CAECC,SAAmB,OAAVI,QAAU,IAAVA,OAAA,EAAAA,EAAYO,iBAAkBD,EACvCT,aAAuB,OAAVG,QAAU,IAAVA,OAAA,EAAAA,EAAYM,UAAWA,EAHrC,SAKC,wBAAQE,WAAYR,EAAYS,MAAOH,EAAQI,QAASX,EAAxD,SACC,sBAAMK,wBAAyB,CAAEC,OAAQC,QALrCA,YCnCG,MAA0B,uCCG5BK,EAAcC,YAAH,kdAMQC,GAcnBrB,EAAUC,IAAOC,IAAV,w5BC6FLoB,EA9FH,WACX,MAA8BC,oBAAS,GAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAkCF,mBAA0B,IAA5D,mBAAOG,EAAP,KAAkBC,EAAlB,KACA,EAA4BJ,mBAAS,GAArC,mBAAOK,EAAP,KAAeC,EAAf,KACA,EAAsCN,mBAAyB,IAA/D,mBAAOO,EAAP,KAAoBC,EAApB,KACA,EAA0BR,mBAAS,GAAnC,mBAAOS,EAAP,KAAcC,EAAd,KACA,EAAgCV,oBAAS,GAAzC,mBAAOW,EAAP,KAAiBC,EAAjB,KAEMC,EAAS,uCAAG,4BAAAnD,EAAA,6DACjBwC,GAAW,GACXU,GAAY,GAFK,SAIUrD,EAdL,GAgBrBD,EAAWwD,MANK,OAIXC,EAJW,OASjBX,EAAaW,GACbL,EAAS,GACTF,EAAe,IACfF,EAAU,GACVJ,GAAW,GAbM,4CAAH,qDAmDf,OACC,qCACC,cAACN,EAAD,IACA,eAAC,EAAD,WACC,4CACCe,GAlEmB,KAkEPJ,EAAYS,OACxB,wBAAQ5B,UAAU,QAAQO,QAASkB,EAAnC,mBAGG,KACFF,EAAqD,KAA1C,oBAAGvB,UAAU,QAAb,oBAA6BqB,KACzCR,EAAU,qDAA8B,MACvCA,IAAYU,GACb,cAAC,EAAD,CACCzB,WAAYmB,EAAS,EACrBlB,eA5EkB,GA6ElBlB,SAAUkC,EAAUE,GAAQpC,SAC5BC,QAASiC,EAAUE,GAAQnC,QAC3Be,WAAYsB,EAAcA,EAAYF,QAAUY,EAChDjC,SAtDe,SAACkC,GACpB,IAAKP,EAAU,CAEd,IAAMpB,EAAS2B,EAAEC,cAAczB,MAGzBb,EAAUsB,EAAUE,GAAQhC,iBAAmBkB,EAGjDV,GACH6B,GAAS,SAACU,GAAD,OAAUA,EAAO,KAI3B,IAAMC,EAAe,CACpBpD,SAAUkC,EAAUE,GAAQpC,SAC5BsB,SACAV,UACAW,cAAeW,EAAUE,GAAQhC,gBAElCmC,GAAe,SAACY,GAAD,4BAAcA,GAAd,CAAoBC,WAqChCV,GACDV,GACDM,EAAYS,SAAWX,EAAS,GACrBiB,IAAXjB,EAII,KAHH,wBAAQjB,UAAU,OAAOO,QArCR,WAEpB,IAAM4B,EAAelB,EAAS,EApDR,KAsDlBkB,EACHX,GAAY,GAEZN,EAAUiB,IA8BR,kCC7FUC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCJdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.eea225a5.chunk.js","sourcesContent":["import { shuffleArray } from \"./utils\";\n\nexport type Question = {\n\tcategory: string;\n\tcorrect_answer: string;\n\tdifficulty: string;\n\tincorrect_answers: string[];\n\tquestion: string;\n\ttype: string;\n};\n\nexport type QuestionState = Question & { answers: string[] };\n\nexport enum Difficulty {\n\tEASY = \"easy\",\n\tMEDIUM = \"medium\",\n\tHARD = \"hard\",\n}\n\nexport const fetchQuizQuestions = async (\n\tamount: number,\n\tdifficulty: Difficulty\n) => {\n\tconst endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\n\tconst data = await (await fetch(endpoint)).json();\n\treturn data.results.map((question: Question) => {\n\t\treturn {\n\t\t\t...question,\n\t\t\tanswers: shuffleArray([\n\t\t\t\t...question.incorrect_answers,\n\t\t\t\tquestion.correct_answer,\n\t\t\t]),\n\t\t};\n\t});\n};\n","export const shuffleArray = (array: any[]) => {\n\treturn [...array].sort(() => Math.random() - 0.5);\n};\n","import styled from \"styled-components\";\n\nexport const Wrapper = styled.div`\n\tmax-width: 1100px;\n\tbackground: #ebfeff;\n\tborder-radius: 10px;\n\tborder: 2px solid #0085a3;\n\tpadding: 20px;\n\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n\ttext-align: center;\n\tmargin: 20px 0;\n\n\tp {\n\t\tfont-size: 1rem;\n\t}\n`;\n\ntype ButtonWrapperProps = {\n\tcorrect: boolean;\n\tuserClicked: boolean;\n};\n\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\n\ttransition: all 0.3s ease;\n\n\t:hover {\n\t\topacity: 0.8;\n\t}\n\n\tbutton {\n\t\tcursor: pointer;\n\t\tuser-select: none;\n\t\tfont-size: 0.8rem;\n\t\twidth: 100%;\n\t\theight: 40px;\n\t\tmargin: 5px 0;\n\t\tbackground: ${({ correct, userClicked }) =>\n\t\t\tcorrect\n\t\t\t\t? \"linear-gradient(90deg, #56ffa4, #59bc86)\"\n\t\t\t\t: !correct && userClicked\n\t\t\t\t? \"linear-gradient(90deg, #ff5656, #c16868)\"\n\t\t\t\t: \"linear-gradient(90deg, #56ccff, #6eafb4)\"};\n\t\tborder: 3px solid white;\n\t\tbox-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\n\t\tborder-radius: 10px;\n\t\tcolor: white;\n\t\ttext-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\n\t}\n`;\n","import React from \"react\";\n\n// types\nimport { AnswerObject } from \"../../App\";\n\n// styles\nimport { Wrapper, ButtonWrapper } from \"./styles\";\n\ntype Props = {\n\tquestion: string;\n\tanswers: string[];\n\tcallback: (e: React.MouseEvent<HTMLButtonElement>) => void;\n\tuserAnswer: AnswerObject | undefined;\n\tquestionNr: number;\n\ttotalQuestions: number;\n};\n\nconst QuestionCard: React.FC<Props> = ({\n\tquestion,\n\tanswers,\n\tcallback,\n\tuserAnswer,\n\tquestionNr,\n\ttotalQuestions,\n}) => {\n\treturn (\n\t\t<Wrapper>\n\t\t\t<p className=\"number\">\n\t\t\t\tQuestion: {questionNr} / {totalQuestions}\n\t\t\t</p>\n\t\t\t<p dangerouslySetInnerHTML={{ __html: question }} />\n\t\t\t<div>\n\t\t\t\t{answers.map((answer) => {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t<ButtonWrapper\n\t\t\t\t\t\t\tkey={answer}\n\t\t\t\t\t\t\tcorrect={userAnswer?.correctAnswer === answer}\n\t\t\t\t\t\t\tuserClicked={userAnswer?.answer === answer}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<button disabled={!!userAnswer} value={answer} onClick={callback}>\n\t\t\t\t\t\t\t\t<span dangerouslySetInnerHTML={{ __html: answer }} />\n\t\t\t\t\t\t\t</button>\n\t\t\t\t\t\t</ButtonWrapper>\n\t\t\t\t\t);\n\t\t\t\t})}\n\t\t\t</div>\n\t\t</Wrapper>\n\t);\n};\n\nexport default QuestionCard;\n","export default __webpack_public_path__ + \"static/media/mountains.6df27a9d.jpeg\";","import styled, { createGlobalStyle } from \"styled-components\";\nimport DBImage from \"./images/mountains.jpeg\";\n\nexport const GlobalStyle = createGlobalStyle`\n    html {\n        height: 100%; \n    }\n\n    body {\n        background-image: url(${DBImage});\n        background-size: cover;\n        margin: 0; \n        padding: 0 20px; \n        display: flex;\n        justify-content: center;\n    }\n\n    * {\n        box-sizing: border-box; \n        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Oxygen, Ubuntu, Cantarell, 'Open Sans', 'Helvetica Neue', sans-serif;\n    }\n`;\n\nexport const Wrapper = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\talign-items: center;\n\n\t> p {\n\t\tcolor: #fff;\n\t}\n\n\t.score {\n\t\tcolor: #fff;\n\t\tfont-size: 2rem;\n\t\tmargin: 0;\n\t}\n\n\th1 {\n\t\tbackground-image: linear-gradient(180deg, #fff, #87f1ff);\n\t\tbackground-size: 100%;\n\t\tbackground-clip: text;\n\t\t-webkit-background-clip: text;\n\t\t-webkit-text-fill-color: transparent;\n\t\t-moz-background-clip: text;\n\t\t-moz-text-fill-color: transparent;\n\t\tfilter: drop-shadow(2px 2px #0085a3);\n\t\tfont-size: 70px;\n\t\tfont-weight: 400;\n\t\tmargin: 20px;\n\t}\n\n\t.start,\n\t.next {\n\t\tcursor: pointer;\n\t\tbackground: linear-gradient(180deg, #fff, #ffcc91);\n\t\tborder: 2px solid #d38558;\n\t\tbox-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\n\t\tborder-radius: 10px;\n\t\theight: 40px;\n\t\tmargin: 20px 0;\n\t\tpadding: 0 40px;\n\t}\n\n\t.start {\n\t\tmax-width: 400px;\n\t}\n`;\n","import React, { useState } from \"react\";\nimport { fetchQuizQuestions, Question } from \"./API\";\n\n// component imports\nimport QuestionCard from \"./components/QuestionCard\";\n\n// Types\nimport { Difficulty } from \"./API\";\nimport { QuestionState } from \"./API\";\n\n// styles\nimport { GlobalStyle, Wrapper } from \"./App.styles\";\n\nexport type AnswerObject = {\n\tquestion: string;\n\tanswer: string;\n\tcorrect: boolean;\n\tcorrectAnswer: string;\n};\n\nconst TOTAL_QUESTIONS = 10;\n\nconst App = () => {\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState<QuestionState[]>([]);\n\tconst [number, setNumber] = useState(0);\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\n\tconst startQuiz = async () => {\n\t\tsetLoading(true);\n\t\tsetGameOver(false);\n\n\t\tconst newQuestions = await fetchQuizQuestions(\n\t\t\tTOTAL_QUESTIONS,\n\t\t\tDifficulty.EASY\n\t\t);\n\n\t\tsetQuestions(newQuestions);\n\t\tsetScore(0);\n\t\tsetUserAnswers([]);\n\t\tsetNumber(0);\n\t\tsetLoading(false);\n\t};\n\n\tconst checkAnswer = (e: React.MouseEvent<HTMLButtonElement>) => {\n\t\tif (!gameOver) {\n\t\t\t// get user's answer\n\t\t\tconst answer = e.currentTarget.value;\n\n\t\t\t// check answer against the correct value\n\t\t\tconst correct = questions[number].correct_answer === answer;\n\n\t\t\t// add score if answer is correct\n\t\t\tif (correct) {\n\t\t\t\tsetScore((prev) => prev + 1);\n\t\t\t}\n\n\t\t\t// save answer in the array of user answers\n\t\t\tconst answerObject = {\n\t\t\t\tquestion: questions[number].question,\n\t\t\t\tanswer,\n\t\t\t\tcorrect,\n\t\t\t\tcorrectAnswer: questions[number].correct_answer,\n\t\t\t};\n\t\t\tsetUserAnswers((prev) => [...prev, answerObject]);\n\t\t}\n\t};\n\n\tconst nextQuestion = () => {\n\t\t// move on to the next question if it's not the last question\n\t\tconst nextQuestion = number + 1;\n\n\t\tif (nextQuestion === TOTAL_QUESTIONS) {\n\t\t\tsetGameOver(true);\n\t\t} else {\n\t\t\tsetNumber(nextQuestion);\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<GlobalStyle></GlobalStyle>\n\t\t\t<Wrapper>\n\t\t\t\t<h1>React Quiz</h1>\n\t\t\t\t{gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n\t\t\t\t\t<button className=\"start\" onClick={startQuiz}>\n\t\t\t\t\t\tStart\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t\t{!gameOver ? <p className=\"score\">Score: {score}</p> : null}\n\t\t\t\t{loading ? <p>Loading Questions...</p> : null}\n\t\t\t\t{!loading && !gameOver && (\n\t\t\t\t\t<QuestionCard\n\t\t\t\t\t\tquestionNr={number + 1}\n\t\t\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\t\t\tquestion={questions[number].question}\n\t\t\t\t\t\tanswers={questions[number].answers}\n\t\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t\t{!gameOver &&\n\t\t\t\t!loading &&\n\t\t\t\tuserAnswers.length === number + 1 &&\n\t\t\t\tnumber !== TOTAL_QUESTIONS - 1 ? (\n\t\t\t\t\t<button className=\"next\" onClick={nextQuestion}>\n\t\t\t\t\t\tNext Question\n\t\t\t\t\t</button>\n\t\t\t\t) : null}\n\t\t\t</Wrapper>\n\t\t</>\n\t);\n};\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}